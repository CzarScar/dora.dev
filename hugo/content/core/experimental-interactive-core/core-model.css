/* put SVG-style CSS styles here for styling Core Model diagram */

* { 
    transform-box: fill-box;
  }

.entity-box { /* styles applying to the entire entity visual element */
    
}

.connector path { /* arrow connectors showing predictive relationships */
}

.entity {
    cursor: default;
}

.has-modal * {
    cursor: pointer;
}

.entity, .construct {
    filter: drop-shadow( 2px 2px 2px rgba(0, 0, 0, .15));
}

.entity text {
    fill:#666;
    transition: all .3s ease-in-out;
}

.has-modal:hover .entity-box {
    filter: drop-shadow( 3px 3px 3px rgba(0, 0, 0, .25));
    transition: all .1s ease-in-out;
}

.entity.has-modal.clickedEntity text {
    fill:#333;
    transform:scale3d(1.05, 1.05, 1.05);
    transform-origin: 0% 50%;
}

.icon {
    display: inline-block;
}

.entity.capability.has-modal.clickedEntity .icon {
    animation: turngear .4s 0s ease-in-out;
    transform-origin: 50% 50%;
}

.metric.has-modal .icon {
    transform:scale3d(1, .85, 1);
    transform-origin: bottom;
}

.metric.has-modal.clickedEntity .icon {
    animation: stretchup .4s 0s ease-out;
    transform:scale3d(1, 1, 1);
}

.outcome.has-modal.clickedEntity .icon {
    animation: stretchout .4s 0s ease-out;
    transform:scale3d(1.1, 1.1, 1.1);
    transform-origin: center;
}

@keyframes turngear {
    0% { transform: rotate(0deg);}
    100% { transform: rotate(60deg);}
    } 

@keyframes stretchup {
    0% { transform: scale3d(1, .75, 1);}
    80% { transform: scale3d(1, 1.1, 1);}
    100% { transform: scale3d(1, 1, 1);}
    } 

@keyframes stretchout {
    0% { transform: scale3d(.85, .85, .85);}
    80% { transform: scale3d(1.2, 1.2, 1.2);}
    100% { transform: scale3d(1.1, 1.1, 1.1);}
    } 

.entity.capability .icon-bg { /* background behind capability icons */
}

.entity.metric .icon-bg { /* background behind metric icons */
}

.entity.outcome .icon-bg { /* background behind outcome icons */
}